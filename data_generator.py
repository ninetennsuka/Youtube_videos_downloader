#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

import random
import string
from datetime import datetime, timedelta
import json

class DataGenerator:
    def __init__(self):
        self.first_names_male = ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ú–∞–∫—Å–∏–º", "–ê—Ä—Ç–µ–º", "–î–º–∏—Ç—Ä–∏–π", "–ù–∏–∫–∏—Ç–∞", "–ò–ª—å—è", "–ê–Ω–¥—Ä–µ–π", "–†–æ–º–∞–Ω", "–°–µ—Ä–≥–µ–π", "–í–ª–∞–¥–∏–º–∏—Ä"]
        self.first_names_female = ["–ê–Ω–Ω–∞", "–ú–∞—Ä–∏—è", "–ï–ª–µ–Ω–∞", "–û–ª—å–≥–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–¢–∞—Ç—å—è–Ω–∞", "–ù–∞—Ç–∞–ª—å—è", "–ò—Ä–∏–Ω–∞", "–°–≤–µ—Ç–ª–∞–Ω–∞", "–Æ–ª–∏—è"]
        self.last_names = ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤", "–ö–æ–∑–ª–æ–≤", "–°–º–∏—Ä–Ω–æ–≤", "–ü–æ–ø–æ–≤", "–°–æ–∫–æ–ª–æ–≤", "–õ–µ–±–µ–¥–µ–≤", "–ö–æ–∑–ª–æ–≤", "–ù–æ–≤–∏–∫–æ–≤"]
        self.domains = ["gmail.com", "yandex.ru", "mail.ru", "yahoo.com", "outlook.com"]
        self.cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞", "–û–º—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É"]
        self.companies = ["–¢–µ—Ö–Ω–æ–°–æ—Ñ—Ç", "–ò–Ω–Ω–æ–≤–∞–õ–∞–±", "–î–∏–≥–∏—Ç–∞–ª–ü—Ä–æ", "–°–º–∞—Ä—Ç–°–∏—Å—Ç–µ–º—Å", "–§—å—é—á–µ—Ä–¢–µ–∫", "–ú–µ–≥–∞–î–µ–≤", "–ö–æ–¥–õ–∞–±", "–ò–¢-–†–µ—à–µ–Ω–∏—è", "–¢–µ—Ö–Ω–æ–í–µ–π–≤", "–°–æ—Ñ—Ç–í–æ—Ä–∫"]

    def generate_name(self, gender=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è"""
        if gender == "male":
            first_name = random.choice(self.first_names_male)
        elif gender == "female":
            first_name = random.choice(self.first_names_female)
        else:
            first_name = random.choice(self.first_names_male + self.first_names_female)
        
        last_name = random.choice(self.last_names)
        return f"{first_name} {last_name}"

    def generate_email(self, name=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç email –∞–¥—Ä–µ—Å"""
        if name:
            username = name.lower().replace(" ", ".").replace("—ë", "e")
        else:
            username = ''.join(random.choices(string.ascii_lowercase, k=random.randint(5, 10)))
        
        domain = random.choice(self.domains)
        return f"{username}@{domain}"

    def generate_phone(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"""
        return f"+7{''.join(random.choices(string.digits, k=10))}"

    def generate_password(self, length=12):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
        chars = string.ascii_letters + string.digits + "!@#$%^&*"
        return ''.join(random.choices(chars, k=length))

    def generate_date(self, start_year=1990, end_year=2025):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É"""
        start_date = datetime(start_year, 1, 1)
        end_date = datetime(end_year, 12, 31)
        
        time_between = end_date - start_date
        days_between = time_between.days
        random_days = random.randrange(days_between)
        
        return start_date + timedelta(days=random_days)

    def generate_address(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å"""
        city = random.choice(self.cities)
        street = f"—É–ª. {random.choice(['–õ–µ–Ω–∏–Ω–∞', '–ü—É—à–∫–∏–Ω–∞', '–ì–∞–≥–∞—Ä–∏–Ω–∞', '–°–æ–≤–µ—Ç—Å–∫–∞—è', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è'])}"
        house = random.randint(1, 200)
        apartment = random.randint(1, 100)
        
        return f"{city}, {street}, –¥. {house}, –∫–≤. {apartment}"

    def generate_lorem_ipsum(self, words_count=50):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Lorem Ipsum —Ç–µ–∫—Å—Ç"""
        lorem_words = [
            "lorem", "ipsum", "dolor", "sit", "amet", "consectetur", "adipiscing", "elit",
            "sed", "do", "eiusmod", "tempor", "incididunt", "ut", "labore", "et", "dolore",
            "magna", "aliqua", "enim", "ad", "minim", "veniam", "quis", "nostrud",
            "exercitation", "ullamco", "laboris", "nisi", "aliquip", "ex", "ea", "commodo",
            "consequat", "duis", "aute", "irure", "in", "reprehenderit", "voluptate",
            "velit", "esse", "cillum", "fugiat", "nulla", "pariatur", "excepteur", "sint"
        ]
        
        text = []
        for _ in range(words_count):
            text.append(random.choice(lorem_words))
        
        return ' '.join(text).capitalize() + '.'

    def generate_user_data(self, count=1):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = []
        for _ in range(count):
            gender = random.choice(["male", "female"])
            name = self.generate_name(gender)
            
            user = {
                "id": random.randint(1000, 9999),
                "name": name,
                "email": self.generate_email(name),
                "phone": self.generate_phone(),
                "gender": gender,
                "birth_date": self.generate_date(1970, 2005).strftime("%Y-%m-%d"),
                "address": self.generate_address(),
                "company": random.choice(self.companies),
                "salary": random.randint(30000, 150000),
                "registration_date": self.generate_date(2020, 2025).strftime("%Y-%m-%d")
            }
            users.append(user)
        
        return users

    def generate_product_data(self, count=1):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤"""
        products = []
        categories = ["–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–û–¥–µ–∂–¥–∞", "–ö–Ω–∏–≥–∏", "–°–ø–æ—Ä—Ç", "–î–æ–º", "–ö—Ä–∞—Å–æ—Ç–∞"]
        
        for _ in range(count):
            product = {
                "id": random.randint(100, 9999),
                "name": f"–¢–æ–≤–∞—Ä {random.randint(1, 1000)}",
                "category": random.choice(categories),
                "price": round(random.uniform(100, 50000), 2),
                "in_stock": random.randint(0, 100),
                "rating": round(random.uniform(1, 5), 1),
                "description": self.generate_lorem_ipsum(20)
            }
            products.append(product)
        
        return products

    def generate_json_data(self, data_type, count):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
        if data_type == "users":
            return self.generate_user_data(count)
        elif data_type == "products":
            return self.generate_product_data(count)
        else:
            return []

def main():
    generator = DataGenerator()
    
    print("=== –ì–ï–ù–ï–†–ê–¢–û–† –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• ===\n")
    
    while True:
        print("1. –°–ª—É—á–∞–π–Ω–æ–µ –∏–º—è")
        print("2. Email –∞–¥—Ä–µ—Å")
        print("3. –¢–µ–ª–µ—Ñ–æ–Ω")
        print("4. –ü–∞—Ä–æ–ª—å")
        print("5. –î–∞—Ç–∞")
        print("6. –ê–¥—Ä–µ—Å")
        print("7. Lorem Ipsum")
        print("8. –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (JSON)")
        print("9. –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ (JSON)")
        print("10. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: ")
        
        if choice == "1":
            gender = input("–ü–æ–ª (male/female/–ª—é–±–æ–π): ").lower()
            gender = gender if gender in ["male", "female"] else None
            name = generator.generate_name(gender)
            print(f"üë§ –ò–º—è: {name}")
            
        elif choice == "2":
            name = input("–ò–º—è –¥–ª—è email (–∏–ª–∏ Enter –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ): ")
            name = name if name else None
            email = generator.generate_email(name)
            print(f"üìß Email: {email}")
            
        elif choice == "3":
            phone = generator.generate_phone()
            print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
            
        elif choice == "4":
            try:
                length = int(input("–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12): ") or "12")
                password = generator.generate_password(length)
                print(f"üîí –ü–∞—Ä–æ–ª—å: {password}")
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞")
                
        elif choice == "5":
            try:
                start_year = int(input("–ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1990): ") or "1990")
                end_year = int(input("–ö–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2025): ") or "2025")
                date = generator.generate_date(start_year, end_year)
                print(f"üìÖ –î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}")
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥")
                
        elif choice == "6":
            address = generator.generate_address()
            print(f"üè† –ê–¥—Ä–µ—Å: {address}")
            
        elif choice == "7":
            try:
                words = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50): ") or "50")
                text = generator.generate_lorem_ipsum(words)
                print(f"üìù –¢–µ–∫—Å—Ç: {text}")
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤")
                
        elif choice == "8":
            try:
                count = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ") or "5")
                users = generator.generate_user_data(count)
                
                print(f"\nüë• –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ({count})")
                print("=" * 40)
                for user in users:
                    print(f"ID: {user['id']}")
                    print(f"–ò–º—è: {user['name']}")
                    print(f"Email: {user['email']}")
                    print(f"–ö–æ–º–ø–∞–Ω–∏—è: {user['company']}")
                    print("-" * 20)
                
                save = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ JSON —Ñ–∞–π–ª? (y/n): ")
                if save.lower() == 'y':
                    filename = input("–ò–º—è —Ñ–∞–π–ª–∞: ") or "users.json"
                    with open(filename, 'w', encoding='utf-8') as f:
                        json.dump(users, f, ensure_ascii=False, indent=2)
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
                    
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                
        elif choice == "9":
            try:
                count = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ") or "5")
                products = generator.generate_product_data(count)
                
                print(f"\nüõçÔ∏è –î–ê–ù–ù–´–ï –¢–û–í–ê–†–û–í ({count})")
                print("=" * 40)
                for product in products:
                    print(f"ID: {product['id']}")
                    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}")
                    print(f"–¶–µ–Ω–∞: {product['price']} —Ä—É–±.")
                    print(f"–†–µ–π—Ç–∏–Ω–≥: {product['rating']}")
                    print("-" * 20)
                
                save = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ JSON —Ñ–∞–π–ª? (y/n): ")
                if save.lower() == 'y':
                    filename = input("–ò–º—è —Ñ–∞–π–ª–∞: ") or "products.json"
                    with open(filename, 'w', encoding='utf-8') as f:
                        json.dump(products, f, ensure_ascii=False, indent=2)
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
                    
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                
        elif choice == "10":
            break
            
        print("\n" + "="*40 + "\n")

if __name__ == "__main__":
    main()
